{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monstor","id","name","email","CardList","console","log","monstors","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","bind","fetch","then","response","json","users","setState","catch","e","this","target","value","filteredMonstors","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAGaA,G,YAAO,SAAAC,GAClB,OAAO,sBAAKC,UAAU,iBAAf,UACL,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACpB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCHXC,G,MAAW,SAAAR,GAEtB,OADAS,QAAQC,IAAIV,GACL,qBAAKC,UAAU,YAAf,SACJD,EAAMW,SAASC,KAAI,SAACR,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCIVQ,G,MATG,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OAChB,uBACEd,UAAU,SACVe,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCgCCG,E,kDAlCb,aAAc,IAAD,8BACX,gBACKC,MAAO,CACVR,SAAU,GACTS,YAAa,IAEhB,EAAKL,aAAe,EAAKA,aAAaM,KAAlB,gBANT,E,gEAQO,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAG,EAAKC,SAAS,CAAChB,SAAUe,OACtCE,OAAM,SAAAC,GAAC,OAAGpB,QAAQC,IAAImB,Q,mCAGXA,GACZC,KAAKH,SAAS,CAACP,YAAaS,EAAEE,OAAOC,U,+BAG9B,IAAD,EAC0BF,KAAKX,MAA9BR,EADD,EACCA,SAAUS,EADX,EACWA,YACXa,EAAmBtB,EAASuB,QAAQ,SAAA9B,GAAO,OAC/CA,EAAQE,KAAK6B,cAAcC,SAAShB,EAAYe,kBAElD,OACE,sBAAKlC,UAAU,MAAf,UACE,kDADF,IAEE,cAAC,EAAD,CAAWa,YAAY,kBAAkBC,aAAce,KAAKf,eAC5D,cAAC,EAAD,CAAUJ,SAAUsB,W,GA7BVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1fc7bfa0.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.component.styles.css';\r\n\r\nexport const Card = props => {\r\n  return <div className=\"card-container\"> \r\n    <img alt=\"monster\" src={`https://robohash.org/${props.monstor.id}?set=set2&size=180x180`}/>\r\n      <h2>{props.monstor.name}</h2>\r\n      <p>{props.monstor.email}</p>\r\n  </div>\r\n}","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props => {\r\n  console.log(props);\r\n  return <div className=\"card-list\"> \r\n    {props.monstors.map((monstor)=> (\r\n      <Card key={monstor.id} monstor={monstor}/>\r\n    ))}\r\n  </div>\r\n}","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nconst SearchBox = ({placeholder, handleChange})=>(\r\n  <input \r\n    className=\"search\"\r\n    type=\"search\" \r\n    placeholder={placeholder}\r\n    onChange={handleChange}  \r\n/>\r\n)\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state ={\n      monstors: [],\n       searchField: \"\"\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users =>this.setState({monstors: users}))\n    .catch(e=> console.log(e))\n  }\n\n  handleChange (e){\n    this.setState({searchField: e.target.value})\n  }\n  \n  render(){\n    const {monstors, searchField} = this.state;\n    const filteredMonstors = monstors.filter( monstor =>(\n      monstor.name.toLowerCase().includes(searchField.toLowerCase())\n    ))\n    return(\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n       `<SearchBox placeholder=\"Search monstors\" handleChange={this.handleChange}/>\n        <CardList monstors={filteredMonstors}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}